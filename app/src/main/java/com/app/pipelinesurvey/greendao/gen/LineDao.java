package com.app.pipelinesurvey.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.pipelinesurvey.dbbean.Line;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINE".
*/
public class LineDao extends AbstractDao<Line, Long> {

    public static final String TABLENAME = "LINE";

    /**
     * Properties of entity Line.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PlineEncod = new Property(1, String.class, "PlineEncod", false, "PLINE_ENCOD");
        public final static Property PipeType = new Property(2, String.class, "PipeType", false, "PIPE_TYPE");
        public final static Property BenExpNum = new Property(3, String.class, "BenExpNum", false, "BEN_EXP_NUM");
        public final static Property EndExpNum = new Property(4, String.class, "EndExpNum", false, "END_EXP_NUM");
        public final static Property Material = new Property(5, String.class, "Material", false, "MATERIAL");
        public final static Property Buried = new Property(6, String.class, "Buried", false, "BURIED");
        public final static Property D_S = new Property(7, String.class, "D_S", false, "D__S");
        public final static Property RowXCol = new Property(8, String.class, "RowXCol", false, "ROW_XCOL");
        public final static Property BenDeep = new Property(9, int.class, "BenDeep", false, "BEN_DEEP");
        public final static Property EndDeep = new Property(10, int.class, "EndDeep", false, "END_DEEP");
        public final static Property TotalHole = new Property(11, int.class, "TotalHole", false, "TOTAL_HOLE");
        public final static Property UsedHole = new Property(12, int.class, "UsedHole", false, "USED_HOLE");
        public final static Property CabNum = new Property(13, int.class, "CabNum", false, "CAB_NUM");
        public final static Property Voltage = new Property(14, String.class, "Voltage", false, "VOLTAGE");
        public final static Property Pressure = new Property(15, String.class, "Pressure", false, "PRESSURE");
        public final static Property HoleDiameter = new Property(16, String.class, "HoleDiameter", false, "HOLE_DIAMETER");
        public final static Property Bulld_Date = new Property(17, java.util.Date.class, "Bulld_Date", false, "BULLD__DATE");
        public final static Property Belong = new Property(18, String.class, "Belong", false, "BELONG");
        public final static Property Remark = new Property(19, String.class, "Remark", false, "REMARK");
        public final static Property Explain = new Property(20, String.class, "Explain", false, "EXPLAIN");
        public final static Property Exp_Date = new Property(21, java.util.Date.class, "Exp_Date", false, "EXP__DATE");
        public final static Property Exp_Unit = new Property(22, String.class, "Exp_Unit", false, "EXP__UNIT");
        public final static Property State = new Property(23, String.class, "State", false, "STATE");
        public final static Property Road = new Property(24, String.class, "Road", false, "ROAD");
        public final static Property BenX = new Property(25, double.class, "BenX", false, "BEN_X");
        public final static Property BenY = new Property(26, double.class, "BenY", false, "BEN_Y");
        public final static Property BenH = new Property(27, double.class, "BenH", false, "BEN_H");
        public final static Property EndX = new Property(28, double.class, "EndX", false, "END_X");
        public final static Property EndY = new Property(29, double.class, "EndY", false, "END_Y");
        public final static Property EndH = new Property(30, double.class, "EndH", false, "END_H");
        public final static Property NoteX = new Property(31, double.class, "NoteX", false, "NOTE_X");
        public final static Property NoteY = new Property(32, double.class, "NoteY", false, "NOTE_Y");
        public final static Property IsDrawNoteText = new Property(33, boolean.class, "IsDrawNoteText", false, "IS_DRAW_NOTE_TEXT");
        public final static Property Temp1 = new Property(34, String.class, "Temp1", false, "TEMP1");
        public final static Property Temp2 = new Property(35, String.class, "Temp2", false, "TEMP2");
        public final static Property Temp3 = new Property(36, String.class, "Temp3", false, "TEMP3");
        public final static Property Import_Date = new Property(37, String.class, "Import_Date", false, "IMPORT__DATE");
        public final static Property PsCheQiBenX = new Property(38, double.class, "PsCheQiBenX", false, "PS_CHE_QI_BEN_X");
        public final static Property PsCheQiBenY = new Property(39, double.class, "PsCheQiBenY", false, "PS_CHE_QI_BEN_Y");
        public final static Property PsCheQiEndX = new Property(40, double.class, "PsCheQiEndX", false, "PS_CHE_QI_END_X");
        public final static Property PsCheQiEndY = new Property(41, double.class, "PsCheQiEndY", false, "PS_CHE_QI_END_Y");
        public final static Property BenExpMethod = new Property(42, String.class, "BenExpMethod", false, "BEN_EXP_METHOD");
        public final static Property EndExpMethod = new Property(43, String.class, "EndExpMethod", false, "END_EXP_METHOD");
        public final static Property PsCheQiBenLeftRight = new Property(44, String.class, "PsCheQiBenLeftRight", false, "PS_CHE_QI_BEN_LEFT_RIGHT");
        public final static Property PsCheQiEndLeftRight = new Property(45, String.class, "PsCheQiEndLeftRight", false, "PS_CHE_QI_END_LEFT_RIGHT");
    }


    public LineDao(DaoConfig config) {
        super(config);
    }
    
    public LineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PLINE_ENCOD\" TEXT," + // 1: PlineEncod
                "\"PIPE_TYPE\" TEXT," + // 2: PipeType
                "\"BEN_EXP_NUM\" TEXT," + // 3: BenExpNum
                "\"END_EXP_NUM\" TEXT," + // 4: EndExpNum
                "\"MATERIAL\" TEXT," + // 5: Material
                "\"BURIED\" TEXT," + // 6: Buried
                "\"D__S\" TEXT," + // 7: D_S
                "\"ROW_XCOL\" TEXT," + // 8: RowXCol
                "\"BEN_DEEP\" INTEGER NOT NULL ," + // 9: BenDeep
                "\"END_DEEP\" INTEGER NOT NULL ," + // 10: EndDeep
                "\"TOTAL_HOLE\" INTEGER NOT NULL ," + // 11: TotalHole
                "\"USED_HOLE\" INTEGER NOT NULL ," + // 12: UsedHole
                "\"CAB_NUM\" INTEGER NOT NULL ," + // 13: CabNum
                "\"VOLTAGE\" TEXT," + // 14: Voltage
                "\"PRESSURE\" TEXT," + // 15: Pressure
                "\"HOLE_DIAMETER\" TEXT," + // 16: HoleDiameter
                "\"BULLD__DATE\" INTEGER," + // 17: Bulld_Date
                "\"BELONG\" TEXT," + // 18: Belong
                "\"REMARK\" TEXT," + // 19: Remark
                "\"EXPLAIN\" TEXT," + // 20: Explain
                "\"EXP__DATE\" INTEGER," + // 21: Exp_Date
                "\"EXP__UNIT\" TEXT," + // 22: Exp_Unit
                "\"STATE\" TEXT," + // 23: State
                "\"ROAD\" TEXT," + // 24: Road
                "\"BEN_X\" REAL NOT NULL ," + // 25: BenX
                "\"BEN_Y\" REAL NOT NULL ," + // 26: BenY
                "\"BEN_H\" REAL NOT NULL ," + // 27: BenH
                "\"END_X\" REAL NOT NULL ," + // 28: EndX
                "\"END_Y\" REAL NOT NULL ," + // 29: EndY
                "\"END_H\" REAL NOT NULL ," + // 30: EndH
                "\"NOTE_X\" REAL NOT NULL ," + // 31: NoteX
                "\"NOTE_Y\" REAL NOT NULL ," + // 32: NoteY
                "\"IS_DRAW_NOTE_TEXT\" INTEGER NOT NULL ," + // 33: IsDrawNoteText
                "\"TEMP1\" TEXT," + // 34: Temp1
                "\"TEMP2\" TEXT," + // 35: Temp2
                "\"TEMP3\" TEXT," + // 36: Temp3
                "\"IMPORT__DATE\" TEXT," + // 37: Import_Date
                "\"PS_CHE_QI_BEN_X\" REAL NOT NULL ," + // 38: PsCheQiBenX
                "\"PS_CHE_QI_BEN_Y\" REAL NOT NULL ," + // 39: PsCheQiBenY
                "\"PS_CHE_QI_END_X\" REAL NOT NULL ," + // 40: PsCheQiEndX
                "\"PS_CHE_QI_END_Y\" REAL NOT NULL ," + // 41: PsCheQiEndY
                "\"BEN_EXP_METHOD\" TEXT," + // 42: BenExpMethod
                "\"END_EXP_METHOD\" TEXT," + // 43: EndExpMethod
                "\"PS_CHE_QI_BEN_LEFT_RIGHT\" TEXT," + // 44: PsCheQiBenLeftRight
                "\"PS_CHE_QI_END_LEFT_RIGHT\" TEXT);"); // 45: PsCheQiEndLeftRight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Line entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String PlineEncod = entity.getPlineEncod();
        if (PlineEncod != null) {
            stmt.bindString(2, PlineEncod);
        }
 
        String PipeType = entity.getPipeType();
        if (PipeType != null) {
            stmt.bindString(3, PipeType);
        }
 
        String BenExpNum = entity.getBenExpNum();
        if (BenExpNum != null) {
            stmt.bindString(4, BenExpNum);
        }
 
        String EndExpNum = entity.getEndExpNum();
        if (EndExpNum != null) {
            stmt.bindString(5, EndExpNum);
        }
 
        String Material = entity.getMaterial();
        if (Material != null) {
            stmt.bindString(6, Material);
        }
 
        String Buried = entity.getBuried();
        if (Buried != null) {
            stmt.bindString(7, Buried);
        }
 
        String D_S = entity.getD_S();
        if (D_S != null) {
            stmt.bindString(8, D_S);
        }
 
        String RowXCol = entity.getRowXCol();
        if (RowXCol != null) {
            stmt.bindString(9, RowXCol);
        }
        stmt.bindLong(10, entity.getBenDeep());
        stmt.bindLong(11, entity.getEndDeep());
        stmt.bindLong(12, entity.getTotalHole());
        stmt.bindLong(13, entity.getUsedHole());
        stmt.bindLong(14, entity.getCabNum());
 
        String Voltage = entity.getVoltage();
        if (Voltage != null) {
            stmt.bindString(15, Voltage);
        }
 
        String Pressure = entity.getPressure();
        if (Pressure != null) {
            stmt.bindString(16, Pressure);
        }
 
        String HoleDiameter = entity.getHoleDiameter();
        if (HoleDiameter != null) {
            stmt.bindString(17, HoleDiameter);
        }
 
        java.util.Date Bulld_Date = entity.getBulld_Date();
        if (Bulld_Date != null) {
            stmt.bindLong(18, Bulld_Date.getTime());
        }
 
        String Belong = entity.getBelong();
        if (Belong != null) {
            stmt.bindString(19, Belong);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(20, Remark);
        }
 
        String Explain = entity.getExplain();
        if (Explain != null) {
            stmt.bindString(21, Explain);
        }
 
        java.util.Date Exp_Date = entity.getExp_Date();
        if (Exp_Date != null) {
            stmt.bindLong(22, Exp_Date.getTime());
        }
 
        String Exp_Unit = entity.getExp_Unit();
        if (Exp_Unit != null) {
            stmt.bindString(23, Exp_Unit);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(24, State);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(25, Road);
        }
        stmt.bindDouble(26, entity.getBenX());
        stmt.bindDouble(27, entity.getBenY());
        stmt.bindDouble(28, entity.getBenH());
        stmt.bindDouble(29, entity.getEndX());
        stmt.bindDouble(30, entity.getEndY());
        stmt.bindDouble(31, entity.getEndH());
        stmt.bindDouble(32, entity.getNoteX());
        stmt.bindDouble(33, entity.getNoteY());
        stmt.bindLong(34, entity.getIsDrawNoteText() ? 1L: 0L);
 
        String Temp1 = entity.getTemp1();
        if (Temp1 != null) {
            stmt.bindString(35, Temp1);
        }
 
        String Temp2 = entity.getTemp2();
        if (Temp2 != null) {
            stmt.bindString(36, Temp2);
        }
 
        String Temp3 = entity.getTemp3();
        if (Temp3 != null) {
            stmt.bindString(37, Temp3);
        }
 
        String Import_Date = entity.getImport_Date();
        if (Import_Date != null) {
            stmt.bindString(38, Import_Date);
        }
        stmt.bindDouble(39, entity.getPsCheQiBenX());
        stmt.bindDouble(40, entity.getPsCheQiBenY());
        stmt.bindDouble(41, entity.getPsCheQiEndX());
        stmt.bindDouble(42, entity.getPsCheQiEndY());
 
        String BenExpMethod = entity.getBenExpMethod();
        if (BenExpMethod != null) {
            stmt.bindString(43, BenExpMethod);
        }
 
        String EndExpMethod = entity.getEndExpMethod();
        if (EndExpMethod != null) {
            stmt.bindString(44, EndExpMethod);
        }
 
        String PsCheQiBenLeftRight = entity.getPsCheQiBenLeftRight();
        if (PsCheQiBenLeftRight != null) {
            stmt.bindString(45, PsCheQiBenLeftRight);
        }
 
        String PsCheQiEndLeftRight = entity.getPsCheQiEndLeftRight();
        if (PsCheQiEndLeftRight != null) {
            stmt.bindString(46, PsCheQiEndLeftRight);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Line entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String PlineEncod = entity.getPlineEncod();
        if (PlineEncod != null) {
            stmt.bindString(2, PlineEncod);
        }
 
        String PipeType = entity.getPipeType();
        if (PipeType != null) {
            stmt.bindString(3, PipeType);
        }
 
        String BenExpNum = entity.getBenExpNum();
        if (BenExpNum != null) {
            stmt.bindString(4, BenExpNum);
        }
 
        String EndExpNum = entity.getEndExpNum();
        if (EndExpNum != null) {
            stmt.bindString(5, EndExpNum);
        }
 
        String Material = entity.getMaterial();
        if (Material != null) {
            stmt.bindString(6, Material);
        }
 
        String Buried = entity.getBuried();
        if (Buried != null) {
            stmt.bindString(7, Buried);
        }
 
        String D_S = entity.getD_S();
        if (D_S != null) {
            stmt.bindString(8, D_S);
        }
 
        String RowXCol = entity.getRowXCol();
        if (RowXCol != null) {
            stmt.bindString(9, RowXCol);
        }
        stmt.bindLong(10, entity.getBenDeep());
        stmt.bindLong(11, entity.getEndDeep());
        stmt.bindLong(12, entity.getTotalHole());
        stmt.bindLong(13, entity.getUsedHole());
        stmt.bindLong(14, entity.getCabNum());
 
        String Voltage = entity.getVoltage();
        if (Voltage != null) {
            stmt.bindString(15, Voltage);
        }
 
        String Pressure = entity.getPressure();
        if (Pressure != null) {
            stmt.bindString(16, Pressure);
        }
 
        String HoleDiameter = entity.getHoleDiameter();
        if (HoleDiameter != null) {
            stmt.bindString(17, HoleDiameter);
        }
 
        java.util.Date Bulld_Date = entity.getBulld_Date();
        if (Bulld_Date != null) {
            stmt.bindLong(18, Bulld_Date.getTime());
        }
 
        String Belong = entity.getBelong();
        if (Belong != null) {
            stmt.bindString(19, Belong);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(20, Remark);
        }
 
        String Explain = entity.getExplain();
        if (Explain != null) {
            stmt.bindString(21, Explain);
        }
 
        java.util.Date Exp_Date = entity.getExp_Date();
        if (Exp_Date != null) {
            stmt.bindLong(22, Exp_Date.getTime());
        }
 
        String Exp_Unit = entity.getExp_Unit();
        if (Exp_Unit != null) {
            stmt.bindString(23, Exp_Unit);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(24, State);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(25, Road);
        }
        stmt.bindDouble(26, entity.getBenX());
        stmt.bindDouble(27, entity.getBenY());
        stmt.bindDouble(28, entity.getBenH());
        stmt.bindDouble(29, entity.getEndX());
        stmt.bindDouble(30, entity.getEndY());
        stmt.bindDouble(31, entity.getEndH());
        stmt.bindDouble(32, entity.getNoteX());
        stmt.bindDouble(33, entity.getNoteY());
        stmt.bindLong(34, entity.getIsDrawNoteText() ? 1L: 0L);
 
        String Temp1 = entity.getTemp1();
        if (Temp1 != null) {
            stmt.bindString(35, Temp1);
        }
 
        String Temp2 = entity.getTemp2();
        if (Temp2 != null) {
            stmt.bindString(36, Temp2);
        }
 
        String Temp3 = entity.getTemp3();
        if (Temp3 != null) {
            stmt.bindString(37, Temp3);
        }
 
        String Import_Date = entity.getImport_Date();
        if (Import_Date != null) {
            stmt.bindString(38, Import_Date);
        }
        stmt.bindDouble(39, entity.getPsCheQiBenX());
        stmt.bindDouble(40, entity.getPsCheQiBenY());
        stmt.bindDouble(41, entity.getPsCheQiEndX());
        stmt.bindDouble(42, entity.getPsCheQiEndY());
 
        String BenExpMethod = entity.getBenExpMethod();
        if (BenExpMethod != null) {
            stmt.bindString(43, BenExpMethod);
        }
 
        String EndExpMethod = entity.getEndExpMethod();
        if (EndExpMethod != null) {
            stmt.bindString(44, EndExpMethod);
        }
 
        String PsCheQiBenLeftRight = entity.getPsCheQiBenLeftRight();
        if (PsCheQiBenLeftRight != null) {
            stmt.bindString(45, PsCheQiBenLeftRight);
        }
 
        String PsCheQiEndLeftRight = entity.getPsCheQiEndLeftRight();
        if (PsCheQiEndLeftRight != null) {
            stmt.bindString(46, PsCheQiEndLeftRight);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Line readEntity(Cursor cursor, int offset) {
        Line entity = new Line( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PlineEncod
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PipeType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BenExpNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EndExpNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Material
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Buried
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // D_S
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // RowXCol
            cursor.getInt(offset + 9), // BenDeep
            cursor.getInt(offset + 10), // EndDeep
            cursor.getInt(offset + 11), // TotalHole
            cursor.getInt(offset + 12), // UsedHole
            cursor.getInt(offset + 13), // CabNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Voltage
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Pressure
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // HoleDiameter
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // Bulld_Date
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Belong
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Remark
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Explain
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // Exp_Date
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Exp_Unit
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // State
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Road
            cursor.getDouble(offset + 25), // BenX
            cursor.getDouble(offset + 26), // BenY
            cursor.getDouble(offset + 27), // BenH
            cursor.getDouble(offset + 28), // EndX
            cursor.getDouble(offset + 29), // EndY
            cursor.getDouble(offset + 30), // EndH
            cursor.getDouble(offset + 31), // NoteX
            cursor.getDouble(offset + 32), // NoteY
            cursor.getShort(offset + 33) != 0, // IsDrawNoteText
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // Temp1
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // Temp2
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // Temp3
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // Import_Date
            cursor.getDouble(offset + 38), // PsCheQiBenX
            cursor.getDouble(offset + 39), // PsCheQiBenY
            cursor.getDouble(offset + 40), // PsCheQiEndX
            cursor.getDouble(offset + 41), // PsCheQiEndY
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // BenExpMethod
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // EndExpMethod
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // PsCheQiBenLeftRight
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45) // PsCheQiEndLeftRight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Line entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPlineEncod(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPipeType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBenExpNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndExpNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaterial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBuried(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setD_S(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRowXCol(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBenDeep(cursor.getInt(offset + 9));
        entity.setEndDeep(cursor.getInt(offset + 10));
        entity.setTotalHole(cursor.getInt(offset + 11));
        entity.setUsedHole(cursor.getInt(offset + 12));
        entity.setCabNum(cursor.getInt(offset + 13));
        entity.setVoltage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPressure(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHoleDiameter(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBulld_Date(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setBelong(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRemark(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setExplain(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setExp_Date(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setExp_Unit(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setState(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRoad(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBenX(cursor.getDouble(offset + 25));
        entity.setBenY(cursor.getDouble(offset + 26));
        entity.setBenH(cursor.getDouble(offset + 27));
        entity.setEndX(cursor.getDouble(offset + 28));
        entity.setEndY(cursor.getDouble(offset + 29));
        entity.setEndH(cursor.getDouble(offset + 30));
        entity.setNoteX(cursor.getDouble(offset + 31));
        entity.setNoteY(cursor.getDouble(offset + 32));
        entity.setIsDrawNoteText(cursor.getShort(offset + 33) != 0);
        entity.setTemp1(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTemp2(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTemp3(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setImport_Date(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setPsCheQiBenX(cursor.getDouble(offset + 38));
        entity.setPsCheQiBenY(cursor.getDouble(offset + 39));
        entity.setPsCheQiEndX(cursor.getDouble(offset + 40));
        entity.setPsCheQiEndY(cursor.getDouble(offset + 41));
        entity.setBenExpMethod(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setEndExpMethod(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setPsCheQiBenLeftRight(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setPsCheQiEndLeftRight(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Line entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Line entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Line entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
