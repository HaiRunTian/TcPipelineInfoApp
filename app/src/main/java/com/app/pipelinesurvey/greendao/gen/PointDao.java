package com.app.pipelinesurvey.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.pipelinesurvey.dbbean.Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT".
*/
public class PointDao extends AbstractDao<Point, Long> {

    public static final String TABLENAME = "POINT";

    /**
     * Properties of entity Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PointEncod = new Property(1, String.class, "PointEncod", false, "POINT_ENCOD");
        public final static Property Map_Name = new Property(2, String.class, "Map_Name", false, "MAP__NAME");
        public final static Property PipeType = new Property(3, String.class, "PipeType", false, "PIPE_TYPE");
        public final static Property Exp_Num = new Property(4, String.class, "Exp_Num", false, "EXP__NUM");
        public final static Property Map_Num = new Property(5, String.class, "Map_Num", false, "MAP__NUM");
        public final static Property Sur_Num = new Property(6, String.class, "Sur_Num", false, "SUR__NUM");
        public final static Property Feature = new Property(7, String.class, "Feature", false, "FEATURE");
        public final static Property Subsid = new Property(8, String.class, "Subsid", false, "SUBSID");
        public final static Property X = new Property(9, long.class, "X", false, "X");
        public final static Property Y = new Property(10, long.class, "Y", false, "Y");
        public final static Property Surf_H = new Property(11, double.class, "Surf_H", false, "SURF__H");
        public final static Property Offset = new Property(12, String.class, "Offset", false, "OFFSET");
        public final static Property WellSize = new Property(13, String.class, "WellSize", false, "WELL_SIZE");
        public final static Property WellDeep = new Property(14, double.class, "WellDeep", false, "WELL_DEEP");
        public final static Property WellWater = new Property(15, double.class, "WellWater", false, "WELL_WATER");
        public final static Property WellMud = new Property(16, double.class, "WellMud", false, "WELL_MUD");
        public final static Property WellCoverShape = new Property(17, String.class, "WellCoverShape", false, "WELL_COVER_SHAPE");
        public final static Property WellCoverSize = new Property(18, String.class, "WellCoverSize", false, "WELL_COVER_SIZE");
        public final static Property WellCoverMaterial = new Property(19, String.class, "WellCoverMaterial", false, "WELL_COVER_MATERIAL");
        public final static Property ExpMethod = new Property(20, String.class, "ExpMethod", false, "EXP_METHOD");
        public final static Property Road = new Property(21, String.class, "Road", false, "ROAD");
        public final static Property Exp_Date = new Property(22, java.util.Date.class, "Exp_Date", false, "EXP__DATE");
        public final static Property Exp_Unit = new Property(23, String.class, "Exp_Unit", false, "EXP__UNIT");
        public final static Property Remark = new Property(24, String.class, "Remark", false, "REMARK");
        public final static Property Picture = new Property(25, String.class, "Picture", false, "PICTURE");
        public final static Property Puzzle = new Property(26, String.class, "Puzzle", false, "PUZZLE");
        public final static Property Symbol = new Property(27, String.class, "symbol", false, "SYMBOL");
        public final static Property Explain = new Property(28, String.class, "Explain", false, "EXPLAIN");
        public final static Property State = new Property(29, String.class, "State", false, "STATE");
        public final static Property Pipes = new Property(30, int.class, "Pipes", false, "PIPES");
        public final static Property LowDeep = new Property(31, int.class, "LowDeep", false, "LOW_DEEP");
        public final static Property UpDeep = new Property(32, int.class, "UpDeep", false, "UP_DEEP");
        public final static Property ExpX = new Property(33, double.class, "ExpX", false, "EXP_X");
        public final static Property ExpY = new Property(34, double.class, "ExpY", false, "EXP_Y");
        public final static Property MapX = new Property(35, double.class, "MapX", false, "MAP_X");
        public final static Property MapY = new Property(36, double.class, "MapY", false, "MAP_Y");
        public final static Property ExpGroup = new Property(37, String.class, "ExpGroup", false, "EXP_GROUP");
        public final static Property SurGroup = new Property(38, String.class, "SurGroup", false, "SUR_GROUP");
        public final static Property InsGroup = new Property(39, String.class, "InsGroup", false, "INS_GROUP");
        public final static Property Angle = new Property(40, double.class, "Angle", false, "ANGLE");
        public final static Property Temp1 = new Property(41, double.class, "Temp1", false, "TEMP1");
        public final static Property Temp2 = new Property(42, double.class, "Temp2", false, "TEMP2");
        public final static Property Temp3 = new Property(43, double.class, "Temp3", false, "TEMP3");
        public final static Property Import_Date = new Property(44, java.util.Date.class, "Import_Date", false, "IMPORT__DATE");
        public final static Property PsCheQiX = new Property(45, double.class, "PsCheQiX", false, "PS_CHE_QI_X");
        public final static Property PsCheQiY = new Property(46, double.class, "PsCheQiY", false, "PS_CHE_QI_Y");
        public final static Property ExpCheQiX = new Property(47, double.class, "ExpCheQiX", false, "EXP_CHE_QI_X");
        public final static Property ExpCheQiY = new Property(48, double.class, "ExpCheQiY", false, "EXP_CHE_QI_Y");
    }


    public PointDao(DaoConfig config) {
        super(config);
    }
    
    public PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"POINT_ENCOD\" TEXT," + // 1: PointEncod
                "\"MAP__NAME\" TEXT," + // 2: Map_Name
                "\"PIPE_TYPE\" TEXT," + // 3: PipeType
                "\"EXP__NUM\" TEXT," + // 4: Exp_Num
                "\"MAP__NUM\" TEXT," + // 5: Map_Num
                "\"SUR__NUM\" TEXT," + // 6: Sur_Num
                "\"FEATURE\" TEXT," + // 7: Feature
                "\"SUBSID\" TEXT," + // 8: Subsid
                "\"X\" INTEGER NOT NULL ," + // 9: X
                "\"Y\" INTEGER NOT NULL ," + // 10: Y
                "\"SURF__H\" REAL NOT NULL ," + // 11: Surf_H
                "\"OFFSET\" TEXT," + // 12: Offset
                "\"WELL_SIZE\" TEXT," + // 13: WellSize
                "\"WELL_DEEP\" REAL NOT NULL ," + // 14: WellDeep
                "\"WELL_WATER\" REAL NOT NULL ," + // 15: WellWater
                "\"WELL_MUD\" REAL NOT NULL ," + // 16: WellMud
                "\"WELL_COVER_SHAPE\" TEXT," + // 17: WellCoverShape
                "\"WELL_COVER_SIZE\" TEXT," + // 18: WellCoverSize
                "\"WELL_COVER_MATERIAL\" TEXT," + // 19: WellCoverMaterial
                "\"EXP_METHOD\" TEXT," + // 20: ExpMethod
                "\"ROAD\" TEXT," + // 21: Road
                "\"EXP__DATE\" INTEGER," + // 22: Exp_Date
                "\"EXP__UNIT\" TEXT," + // 23: Exp_Unit
                "\"REMARK\" TEXT," + // 24: Remark
                "\"PICTURE\" TEXT," + // 25: Picture
                "\"PUZZLE\" TEXT," + // 26: Puzzle
                "\"SYMBOL\" TEXT," + // 27: symbol
                "\"EXPLAIN\" TEXT," + // 28: Explain
                "\"STATE\" TEXT," + // 29: State
                "\"PIPES\" INTEGER NOT NULL ," + // 30: Pipes
                "\"LOW_DEEP\" INTEGER NOT NULL ," + // 31: LowDeep
                "\"UP_DEEP\" INTEGER NOT NULL ," + // 32: UpDeep
                "\"EXP_X\" REAL NOT NULL ," + // 33: ExpX
                "\"EXP_Y\" REAL NOT NULL ," + // 34: ExpY
                "\"MAP_X\" REAL NOT NULL ," + // 35: MapX
                "\"MAP_Y\" REAL NOT NULL ," + // 36: MapY
                "\"EXP_GROUP\" TEXT," + // 37: ExpGroup
                "\"SUR_GROUP\" TEXT," + // 38: SurGroup
                "\"INS_GROUP\" TEXT," + // 39: InsGroup
                "\"ANGLE\" REAL NOT NULL ," + // 40: Angle
                "\"TEMP1\" REAL NOT NULL ," + // 41: Temp1
                "\"TEMP2\" REAL NOT NULL ," + // 42: Temp2
                "\"TEMP3\" REAL NOT NULL ," + // 43: Temp3
                "\"IMPORT__DATE\" INTEGER," + // 44: Import_Date
                "\"PS_CHE_QI_X\" REAL NOT NULL ," + // 45: PsCheQiX
                "\"PS_CHE_QI_Y\" REAL NOT NULL ," + // 46: PsCheQiY
                "\"EXP_CHE_QI_X\" REAL NOT NULL ," + // 47: ExpCheQiX
                "\"EXP_CHE_QI_Y\" REAL NOT NULL );"); // 48: ExpCheQiY
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Point entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String PointEncod = entity.getPointEncod();
        if (PointEncod != null) {
            stmt.bindString(2, PointEncod);
        }
 
        String Map_Name = entity.getMap_Name();
        if (Map_Name != null) {
            stmt.bindString(3, Map_Name);
        }
 
        String PipeType = entity.getPipeType();
        if (PipeType != null) {
            stmt.bindString(4, PipeType);
        }
 
        String Exp_Num = entity.getExp_Num();
        if (Exp_Num != null) {
            stmt.bindString(5, Exp_Num);
        }
 
        String Map_Num = entity.getMap_Num();
        if (Map_Num != null) {
            stmt.bindString(6, Map_Num);
        }
 
        String Sur_Num = entity.getSur_Num();
        if (Sur_Num != null) {
            stmt.bindString(7, Sur_Num);
        }
 
        String Feature = entity.getFeature();
        if (Feature != null) {
            stmt.bindString(8, Feature);
        }
 
        String Subsid = entity.getSubsid();
        if (Subsid != null) {
            stmt.bindString(9, Subsid);
        }
        stmt.bindLong(10, entity.getX());
        stmt.bindLong(11, entity.getY());
        stmt.bindDouble(12, entity.getSurf_H());
 
        String Offset = entity.getOffset();
        if (Offset != null) {
            stmt.bindString(13, Offset);
        }
 
        String WellSize = entity.getWellSize();
        if (WellSize != null) {
            stmt.bindString(14, WellSize);
        }
        stmt.bindDouble(15, entity.getWellDeep());
        stmt.bindDouble(16, entity.getWellWater());
        stmt.bindDouble(17, entity.getWellMud());
 
        String WellCoverShape = entity.getWellCoverShape();
        if (WellCoverShape != null) {
            stmt.bindString(18, WellCoverShape);
        }
 
        String WellCoverSize = entity.getWellCoverSize();
        if (WellCoverSize != null) {
            stmt.bindString(19, WellCoverSize);
        }
 
        String WellCoverMaterial = entity.getWellCoverMaterial();
        if (WellCoverMaterial != null) {
            stmt.bindString(20, WellCoverMaterial);
        }
 
        String ExpMethod = entity.getExpMethod();
        if (ExpMethod != null) {
            stmt.bindString(21, ExpMethod);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(22, Road);
        }
 
        java.util.Date Exp_Date = entity.getExp_Date();
        if (Exp_Date != null) {
            stmt.bindLong(23, Exp_Date.getTime());
        }
 
        String Exp_Unit = entity.getExp_Unit();
        if (Exp_Unit != null) {
            stmt.bindString(24, Exp_Unit);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(25, Remark);
        }
 
        String Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(26, Picture);
        }
 
        String Puzzle = entity.getPuzzle();
        if (Puzzle != null) {
            stmt.bindString(27, Puzzle);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(28, symbol);
        }
 
        String Explain = entity.getExplain();
        if (Explain != null) {
            stmt.bindString(29, Explain);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(30, State);
        }
        stmt.bindLong(31, entity.getPipes());
        stmt.bindLong(32, entity.getLowDeep());
        stmt.bindLong(33, entity.getUpDeep());
        stmt.bindDouble(34, entity.getExpX());
        stmt.bindDouble(35, entity.getExpY());
        stmt.bindDouble(36, entity.getMapX());
        stmt.bindDouble(37, entity.getMapY());
 
        String ExpGroup = entity.getExpGroup();
        if (ExpGroup != null) {
            stmt.bindString(38, ExpGroup);
        }
 
        String SurGroup = entity.getSurGroup();
        if (SurGroup != null) {
            stmt.bindString(39, SurGroup);
        }
 
        String InsGroup = entity.getInsGroup();
        if (InsGroup != null) {
            stmt.bindString(40, InsGroup);
        }
        stmt.bindDouble(41, entity.getAngle());
        stmt.bindDouble(42, entity.getTemp1());
        stmt.bindDouble(43, entity.getTemp2());
        stmt.bindDouble(44, entity.getTemp3());
 
        java.util.Date Import_Date = entity.getImport_Date();
        if (Import_Date != null) {
            stmt.bindLong(45, Import_Date.getTime());
        }
        stmt.bindDouble(46, entity.getPsCheQiX());
        stmt.bindDouble(47, entity.getPsCheQiY());
        stmt.bindDouble(48, entity.getExpCheQiX());
        stmt.bindDouble(49, entity.getExpCheQiY());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Point entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String PointEncod = entity.getPointEncod();
        if (PointEncod != null) {
            stmt.bindString(2, PointEncod);
        }
 
        String Map_Name = entity.getMap_Name();
        if (Map_Name != null) {
            stmt.bindString(3, Map_Name);
        }
 
        String PipeType = entity.getPipeType();
        if (PipeType != null) {
            stmt.bindString(4, PipeType);
        }
 
        String Exp_Num = entity.getExp_Num();
        if (Exp_Num != null) {
            stmt.bindString(5, Exp_Num);
        }
 
        String Map_Num = entity.getMap_Num();
        if (Map_Num != null) {
            stmt.bindString(6, Map_Num);
        }
 
        String Sur_Num = entity.getSur_Num();
        if (Sur_Num != null) {
            stmt.bindString(7, Sur_Num);
        }
 
        String Feature = entity.getFeature();
        if (Feature != null) {
            stmt.bindString(8, Feature);
        }
 
        String Subsid = entity.getSubsid();
        if (Subsid != null) {
            stmt.bindString(9, Subsid);
        }
        stmt.bindLong(10, entity.getX());
        stmt.bindLong(11, entity.getY());
        stmt.bindDouble(12, entity.getSurf_H());
 
        String Offset = entity.getOffset();
        if (Offset != null) {
            stmt.bindString(13, Offset);
        }
 
        String WellSize = entity.getWellSize();
        if (WellSize != null) {
            stmt.bindString(14, WellSize);
        }
        stmt.bindDouble(15, entity.getWellDeep());
        stmt.bindDouble(16, entity.getWellWater());
        stmt.bindDouble(17, entity.getWellMud());
 
        String WellCoverShape = entity.getWellCoverShape();
        if (WellCoverShape != null) {
            stmt.bindString(18, WellCoverShape);
        }
 
        String WellCoverSize = entity.getWellCoverSize();
        if (WellCoverSize != null) {
            stmt.bindString(19, WellCoverSize);
        }
 
        String WellCoverMaterial = entity.getWellCoverMaterial();
        if (WellCoverMaterial != null) {
            stmt.bindString(20, WellCoverMaterial);
        }
 
        String ExpMethod = entity.getExpMethod();
        if (ExpMethod != null) {
            stmt.bindString(21, ExpMethod);
        }
 
        String Road = entity.getRoad();
        if (Road != null) {
            stmt.bindString(22, Road);
        }
 
        java.util.Date Exp_Date = entity.getExp_Date();
        if (Exp_Date != null) {
            stmt.bindLong(23, Exp_Date.getTime());
        }
 
        String Exp_Unit = entity.getExp_Unit();
        if (Exp_Unit != null) {
            stmt.bindString(24, Exp_Unit);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(25, Remark);
        }
 
        String Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(26, Picture);
        }
 
        String Puzzle = entity.getPuzzle();
        if (Puzzle != null) {
            stmt.bindString(27, Puzzle);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(28, symbol);
        }
 
        String Explain = entity.getExplain();
        if (Explain != null) {
            stmt.bindString(29, Explain);
        }
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(30, State);
        }
        stmt.bindLong(31, entity.getPipes());
        stmt.bindLong(32, entity.getLowDeep());
        stmt.bindLong(33, entity.getUpDeep());
        stmt.bindDouble(34, entity.getExpX());
        stmt.bindDouble(35, entity.getExpY());
        stmt.bindDouble(36, entity.getMapX());
        stmt.bindDouble(37, entity.getMapY());
 
        String ExpGroup = entity.getExpGroup();
        if (ExpGroup != null) {
            stmt.bindString(38, ExpGroup);
        }
 
        String SurGroup = entity.getSurGroup();
        if (SurGroup != null) {
            stmt.bindString(39, SurGroup);
        }
 
        String InsGroup = entity.getInsGroup();
        if (InsGroup != null) {
            stmt.bindString(40, InsGroup);
        }
        stmt.bindDouble(41, entity.getAngle());
        stmt.bindDouble(42, entity.getTemp1());
        stmt.bindDouble(43, entity.getTemp2());
        stmt.bindDouble(44, entity.getTemp3());
 
        java.util.Date Import_Date = entity.getImport_Date();
        if (Import_Date != null) {
            stmt.bindLong(45, Import_Date.getTime());
        }
        stmt.bindDouble(46, entity.getPsCheQiX());
        stmt.bindDouble(47, entity.getPsCheQiY());
        stmt.bindDouble(48, entity.getExpCheQiX());
        stmt.bindDouble(49, entity.getExpCheQiY());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Point readEntity(Cursor cursor, int offset) {
        Point entity = new Point( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PointEncod
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Map_Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PipeType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Exp_Num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Map_Num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Sur_Num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Feature
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Subsid
            cursor.getLong(offset + 9), // X
            cursor.getLong(offset + 10), // Y
            cursor.getDouble(offset + 11), // Surf_H
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Offset
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // WellSize
            cursor.getDouble(offset + 14), // WellDeep
            cursor.getDouble(offset + 15), // WellWater
            cursor.getDouble(offset + 16), // WellMud
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // WellCoverShape
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // WellCoverSize
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // WellCoverMaterial
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ExpMethod
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Road
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // Exp_Date
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Exp_Unit
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Remark
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Picture
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Puzzle
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // symbol
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Explain
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // State
            cursor.getInt(offset + 30), // Pipes
            cursor.getInt(offset + 31), // LowDeep
            cursor.getInt(offset + 32), // UpDeep
            cursor.getDouble(offset + 33), // ExpX
            cursor.getDouble(offset + 34), // ExpY
            cursor.getDouble(offset + 35), // MapX
            cursor.getDouble(offset + 36), // MapY
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // ExpGroup
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // SurGroup
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // InsGroup
            cursor.getDouble(offset + 40), // Angle
            cursor.getDouble(offset + 41), // Temp1
            cursor.getDouble(offset + 42), // Temp2
            cursor.getDouble(offset + 43), // Temp3
            cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)), // Import_Date
            cursor.getDouble(offset + 45), // PsCheQiX
            cursor.getDouble(offset + 46), // PsCheQiY
            cursor.getDouble(offset + 47), // ExpCheQiX
            cursor.getDouble(offset + 48) // ExpCheQiY
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Point entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPointEncod(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMap_Name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPipeType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExp_Num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMap_Num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSur_Num(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFeature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubsid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setX(cursor.getLong(offset + 9));
        entity.setY(cursor.getLong(offset + 10));
        entity.setSurf_H(cursor.getDouble(offset + 11));
        entity.setOffset(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWellSize(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWellDeep(cursor.getDouble(offset + 14));
        entity.setWellWater(cursor.getDouble(offset + 15));
        entity.setWellMud(cursor.getDouble(offset + 16));
        entity.setWellCoverShape(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWellCoverSize(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWellCoverMaterial(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setExpMethod(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRoad(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setExp_Date(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setExp_Unit(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRemark(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPicture(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPuzzle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSymbol(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setExplain(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setState(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPipes(cursor.getInt(offset + 30));
        entity.setLowDeep(cursor.getInt(offset + 31));
        entity.setUpDeep(cursor.getInt(offset + 32));
        entity.setExpX(cursor.getDouble(offset + 33));
        entity.setExpY(cursor.getDouble(offset + 34));
        entity.setMapX(cursor.getDouble(offset + 35));
        entity.setMapY(cursor.getDouble(offset + 36));
        entity.setExpGroup(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSurGroup(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setInsGroup(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setAngle(cursor.getDouble(offset + 40));
        entity.setTemp1(cursor.getDouble(offset + 41));
        entity.setTemp2(cursor.getDouble(offset + 42));
        entity.setTemp3(cursor.getDouble(offset + 43));
        entity.setImport_Date(cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)));
        entity.setPsCheQiX(cursor.getDouble(offset + 45));
        entity.setPsCheQiY(cursor.getDouble(offset + 46));
        entity.setExpCheQiX(cursor.getDouble(offset + 47));
        entity.setExpCheQiY(cursor.getDouble(offset + 48));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Point entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Point entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Point entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
