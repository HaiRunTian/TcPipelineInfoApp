package com.app.pipelinesurvey.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.pipelinesurvey.dbbean.Items;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEMS".
*/
public class ItemsDao extends AbstractDao<Items, Long> {

    public static final String TABLENAME = "ITEMS";

    /**
     * Properties of entity Items.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ItemName = new Property(1, String.class, "itemName", false, "ITEM_NAME");
        public final static Property CityName = new Property(2, String.class, "cityName", false, "CITY_NAME");
        public final static Property Creator = new Property(3, String.class, "creator", false, "CREATOR");
        public final static Property Change_man = new Property(4, String.class, "change_man", false, "CHANGE_MAN");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Last_Time = new Property(6, String.class, "last_Time", false, "LAST__TIME");
        public final static Property ItemAddress = new Property(7, String.class, "itemAddress", false, "ITEM_ADDRESS");
        public final static Property BaseMap_path = new Property(8, String.class, "baseMap_path", false, "BASE_MAP_PATH");
    }


    public ItemsDao(DaoConfig config) {
        super(config);
    }
    
    public ItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ITEM_NAME\" TEXT," + // 1: itemName
                "\"CITY_NAME\" TEXT," + // 2: cityName
                "\"CREATOR\" TEXT," + // 3: creator
                "\"CHANGE_MAN\" TEXT," + // 4: change_man
                "\"CREATE_TIME\" TEXT," + // 5: createTime
                "\"LAST__TIME\" TEXT," + // 6: last_Time
                "\"ITEM_ADDRESS\" TEXT," + // 7: itemAddress
                "\"BASE_MAP_PATH\" TEXT);"); // 8: baseMap_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Items entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(4, creator);
        }
 
        String change_man = entity.getChange_man();
        if (change_man != null) {
            stmt.bindString(5, change_man);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String last_Time = entity.getLast_Time();
        if (last_Time != null) {
            stmt.bindString(7, last_Time);
        }
 
        String itemAddress = entity.getItemAddress();
        if (itemAddress != null) {
            stmt.bindString(8, itemAddress);
        }
 
        String baseMap_path = entity.getBaseMap_path();
        if (baseMap_path != null) {
            stmt.bindString(9, baseMap_path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Items entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(4, creator);
        }
 
        String change_man = entity.getChange_man();
        if (change_man != null) {
            stmt.bindString(5, change_man);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String last_Time = entity.getLast_Time();
        if (last_Time != null) {
            stmt.bindString(7, last_Time);
        }
 
        String itemAddress = entity.getItemAddress();
        if (itemAddress != null) {
            stmt.bindString(8, itemAddress);
        }
 
        String baseMap_path = entity.getBaseMap_path();
        if (baseMap_path != null) {
            stmt.bindString(9, baseMap_path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Items readEntity(Cursor cursor, int offset) {
        Items entity = new Items( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creator
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // change_man
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // last_Time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // itemAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // baseMap_path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Items entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setItemName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreator(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChange_man(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLast_Time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setItemAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBaseMap_path(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Items entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Items entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Items entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
